{"version":3,"file":"backtop2.js","sources":["../../../../../../packages/components/backtop/src/backtop.vue"],"sourcesContent":["<template>\n  <transition :name=\"`${ns.namespace.value}-fade-in`\">\n    <div\n      v-if=\"visible\"\n      :style=\"{\n        right: styleRight,\n        bottom: styleBottom,\n      }\"\n      :class=\"ns.b()\"\n      @click.stop=\"handleClick\"\n    >\n      <slot>\n        <el-icon :class=\"ns.e('icon')\"><caret-top /></el-icon>\n      </slot>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref, computed, onMounted, shallowRef } from 'vue'\nimport { useEventListener, useThrottleFn } from '@vueuse/core'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { easeInOutCubic, throwError } from '@element-plus/utils'\nimport { CaretTop } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport { backtopEmits, backtopProps } from './backtop'\n\nconst COMPONENT_NAME = 'ElBacktop'\n\ndefineOptions({\n  name: 'ElBacktop',\n})\n\nconst props = defineProps(backtopProps)\nconst emit = defineEmits(backtopEmits)\n\nconst ns = useNamespace('backtop')\nconst el = shallowRef<HTMLElement | undefined>(document.documentElement)\nconst container = shallowRef<Document | HTMLElement>(document)\nconst visible = ref(false)\nconst styleBottom = computed(() => `${props.bottom}px`)\nconst styleRight = computed(() => `${props.right}px`)\n\nconst scrollToTop = () => {\n  if (!el.value) return\n  const beginTime = Date.now()\n  const beginValue = el.value.scrollTop\n  const frameFunc = () => {\n    if (!el.value) return\n    const progress = (Date.now() - beginTime) / 500\n    if (progress < 1) {\n      el.value.scrollTop = beginValue * (1 - easeInOutCubic(progress))\n      requestAnimationFrame(frameFunc)\n    } else {\n      el.value.scrollTop = 0\n    }\n  }\n  requestAnimationFrame(frameFunc)\n}\nconst handleScroll = () => {\n  if (el.value) visible.value = el.value.scrollTop >= props.visibilityHeight\n}\nconst handleClick = (event: MouseEvent) => {\n  scrollToTop()\n  emit('click', event)\n}\n\nconst handleScrollThrottled = useThrottleFn(handleScroll, 300)\n\nonMounted(() => {\n  if (props.target) {\n    el.value = document.querySelector<HTMLElement>(props.target) ?? undefined\n    if (!el.value) {\n      throwError(COMPONENT_NAME, `target is not existed: ${props.target}`)\n    }\n    container.value = el.value\n  }\n\n  useEventListener(container, 'scroll', handleScrollThrottled)\n})\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAgBA;;;;AAGA;;;;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}